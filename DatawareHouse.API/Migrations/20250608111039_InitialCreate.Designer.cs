// <auto-generated />
using System;
using DatawareHouse.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatawareHouse.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250608111039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatawareHouse.Models.Entities.InventoryMismatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetectedPositionCode")
                        .HasColumnType("text");

                    b.Property<int>("MismatchType")
                        .HasColumnType("integer");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartNumber");

                    b.ToTable("inventory_mismatches", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.MovementLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FromPositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToPositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("movement_logs", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RackPositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StoredAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("RackPositionId")
                        .IsUnique();

                    b.HasIndex("RackPositionId", "PartId")
                        .IsUnique();

                    b.ToTable("packages", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<float>("Depth")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.RackPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PositionCode")
                        .IsUnique();

                    b.HasIndex("RackId");

                    b.ToTable("rack_positions", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.ScanSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScannedPartNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScannedPositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScannedPositionCode", "ScannedPartNumber");

                    b.ToTable("scan_sessions", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.SuggestedPlacement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlgorithmUsed")
                        .HasColumnType("integer");

                    b.Property<float>("FitScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<string>("SuggestedPositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("suggested_placements", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.WarehouseRack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RackCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("warehouse_racks", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.ToTable("workers", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.WorkerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentPositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("worker_positions", (string)null);
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.MovementLog", b =>
                {
                    b.HasOne("DatawareHouse.Models.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.Package", b =>
                {
                    b.HasOne("DatawareHouse.Models.Entities.Part", "Part")
                        .WithMany("Packages")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatawareHouse.Models.Entities.RackPosition", "RackPosition")
                        .WithOne("Package")
                        .HasForeignKey("DatawareHouse.Models.Entities.Package", "RackPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("RackPosition");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.RackPosition", b =>
                {
                    b.HasOne("DatawareHouse.Models.Entities.WarehouseRack", "Rack")
                        .WithMany("Positions")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rack");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.WorkerPosition", b =>
                {
                    b.HasOne("DatawareHouse.Models.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.Part", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.RackPosition", b =>
                {
                    b.Navigation("Package");
                });

            modelBuilder.Entity("DatawareHouse.Models.Entities.WarehouseRack", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
